# openapi: 3.0.3
# info:
#   title: Order Service API
#   version: 1.0.0

# paths:
#   /checkout:
#     post:
#       summary: Create a new checkout
#       description: Calculates all fees and totals and returns them to the client
#       operationId: createCheckout
#       requestBody:
#         required: true
#         content:
#           application/json:
#             schema:
#               $ref: "#/components/schemas/CheckoutInput"
#       responses:
#         "200":
#           description: Successfully created a checkout
#           content:
#             application/json:
#               schema:
#                 $ref: "#/components/schemas/CheckoutOutput"
#               examples:
#                 createCheckoutResponse:
#                   summary: Example response for a created checkout
#                   value:
#                     checkoutId: "0f2cc7b3-1ab4-4113-9df9-a3da7a3c5cbb"
#                     totalPrice: 799.99
#                     currency: "USD"
#                     items:
#                       - listingId: 12
#                         price: 199.99
#                         quantity: 2
#                       - listingId: 47
#                         price: 400.01
#                         quantity: 1
#                     customerDetails:
#                       name: "John Doe"
#                       email: "john@example.com"
#                       fullAddress: "123 Main St, Anytown"
#                       street: "Main St"
#                       latCoords: 12345
#                       lngCoords: 67890
#                     deliveryDetails:
#                       category: "ANARI XL"
#                       travelTime: "25 mins"
#                       travelDistance: "15 miles"
#                       feeBreakdown:
#                         total: 10.5
#                         surcharges:
#                           - reason: "High Congestion Area"
#                             fee: 0.5
#                         distanceCharge: 5
#                         weightCharge: 5

#     put:
#       summary: Update an existing checkout
#       description: Modifies an existing checkout with new or changed data
#       operationId: updateCheckout
#       requestBody:
#         required: true
#         content:
#           application/json:
#             schema:
#               $ref: "#/components/schemas/CheckoutInput"
#       responses:
#         "200":
#           description: Successfully updated a checkout
#           content:
#             application/json:
#               schema:
#                 $ref: "#/components/schemas/CheckoutOutput"
#               examples:
#                 updateCheckoutResponse:
#                   summary: Example response for an updated checkout
#                   value:
#                     checkoutId: "d74f4f0b-6c9f-4c89-9f6e-3c899fd604be"
#                     totalPrice: 699.99
#                     currency: "USD"
#                     items:
#                       - listingId: 12
#                         price: 199.99
#                         quantity: 2
#                       - listingId: 47
#                         price: 300.01
#                         quantity: 1
#                     customerDetails:
#                       name: "John Doe"
#                       email: "john@example.com"
#                       fullAddress: "123 Main St, Anytown"
#                       street: "Main St"
#                       latCoords: 12345
#                       lngCoords: 67890
#                     deliveryDetails:
#                       category: "ANARI XL"
#                       travelTime: "25 mins"
#                       travelDistance: "test milessssssss"
#                       estimatedDeliveryTime: "45 mins"
#                       feeBreakdown:
#                         total: 10.5
#                         surcharges:
#                           - reason: "High Congestion Area"
#                             fee: 0.5
#                         distanceCharge: 5
#                         weightCharge: 5

# components:
#   schemas:
#     CustomerDetails:
#       type: object
#       properties:
#         name:
#           type: string
#         email:
#           type: string
#         fullAddress:
#           type: string
#         street:
#           type: string
#         latCoords:
#           type: integer
#         lngCoords:
#           type: integer

#     CheckoutInput:
#       type: object
#       properties:
#         listingIds:
#           type: array
#           description: "Array of listing IDs to include in the checkout"
#           items:
#             type: integer
#         orderedQty:
#           type: integer
#           description: "Number of items ordered"
#         customerDetails:
#           $ref: "#/components/schemas/CustomerDetails"
#       required:
#         - listingIds
#         - orderedQty
#         - customerDetails

#     CheckoutOutput:
#       type: object
#       description: "Response details after creating or updating a checkout"
#       properties:
#         checkoutId:
#           type: integer
#           description: "Unique ID for the checkout"
#         totalPrice:
#           type: number
#           format: float
#           description: "Total price including fees and taxes"
#         currency:
#           type: string
#           description: "Currency code (e.g., USD, EUR)"
#         items:
#           type: array
#           items:
#             type: object
#             properties:
#               listingId:
#                 type: integer
#               price:
#                 type: number
#               quantity:
#                 type: integer
#         customerDetails:
#           $ref: "#/components/schemas/CustomerDetails"
#         deliveryDetails:
#           type: object
#           description: "All relevant delivery information"
#           properties:
#             category:
#               type: string
#               description: "Vehicle category or service level"
#             travelTime:
#               type: string
#               description: "Estimated travel time in minutes (or as a text description)"
#             travelDistance:
#               type: string
#               description: "Travel distance (e.g., '5 miles')"
#             estimatedDeliveryTime:
#               type: string
#               description: "Estimated total delivery time"
#             feeBreakdown:
#               type: object
#               description: "Details on fees and surcharges"
#               properties:
#                 total:
#                   type: number
#                   format: float
#                 surcharges:
#                   type: array
#                   items:
#                     type: object
#                     properties:
#                       reason:
#                         type: string
#                       fee:
#                         type: number
#                         format: float
#                 distanceCharge:
#                   type: number
#                   format: float
#                 weightCharge:
#                   type: number
#                   format: float

openapi: 3.0.3
info:
  title: Order Service API
  version: "1.0.0"
  description: A RESTful API for managing checkouts and orders in the order service.
servers:
  - url: http://order.example.com/v1
tags:
  - name: Checkouts
  - name: Orders

paths:
  /checkouts:
    get:
      tags:
        - Checkouts
      summary: Retrieve all checkouts
      responses:
        "200":
          description: A list of checkout records.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Checkout"
    post:
      tags:
        - Checkouts
      summary: Create a new checkout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CheckoutInput"
      responses:
        "201":
          description: Checkout created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Checkout"

  /checkouts/{checkoutId}:
    get:
      tags:
        - Checkouts
      summary: Retrieve a specific checkout
      parameters:
        - in: path
          name: checkoutId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Checkout found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Checkout"
        "404":
          description: Checkout not found
    put:
      tags:
        - Checkouts
      summary: Update an existing checkout
      parameters:
        - in: path
          name: checkoutId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CheckoutInput"
      responses:
        "200":
          description: Checkout updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Checkout"
        "404":
          description: Checkout not found
    delete:
      tags:
        - Checkouts
      summary: Delete a checkout
      parameters:
        - in: path
          name: checkoutId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Checkout deleted successfully
        "404":
          description: Checkout not found

  /orders:
    get:
      tags:
        - Orders
      summary: Retrieve all orders
      responses:
        "200":
          description: A list of order records.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
    post:
      tags:
        - Orders
      summary: Create a new order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderInput"
      responses:
        "201":
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"

  /orders/{orderId}:
    get:
      tags:
        - Orders
      summary: Retrieve a specific order
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Order found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "404":
          description: Order not found
    put:
      tags:
        - Orders
      summary: Update an existing order
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderInput"
      responses:
        "200":
          description: Order updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "404":
          description: Order not found
    delete:
      tags:
        - Orders
      summary: Delete an order
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Order deleted successfully
        "404":
          description: Order not found

components:
  schemas:
    Checkout:
      type: object
      properties:
        id:
          type: string
          format: uuid
        listingIds:
          type: array
          items:
            type: string
            format: uuid
        customerInfo:
          type: object
          properties:
            name:
              type: string
            email:
              type: string
            phone:
              type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        status:
          type: string
          enum: [PENDING, COMPLETED]
        orderNotes:
          type: string
        deliveryAddress:
          type: string
        deliveryPricingRequestId:
          type: string
          format: uuid
        subtotal:
          type: number
          format: float
      required:
        - id
        - listingIds
        - status
        - createdAt
        - updatedAt

    CheckoutInput:
      type: object
      properties:
        listingIds:
          type: array
          items:
            type: string
            format: uuid
        customerInfo:
          type: object
          properties:
            name:
              type: string
            email:
              type: string
            phone:
              type: string
        status:
          type: string
          enum: [PENDING, COMPLETED]
        orderNotes:
          type: string
        deliveryAddress:
          type: string
        deliveryPricingRequestId:
          type: string
          format: uuid
        subtotal:
          type: number
          format: float
      required:
        - listingIds
        - status

    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
        listingIds:
          type: array
          items:
            type: string
            format: uuid
        customerInfo:
          type: object
          properties:
            name:
              type: string
            email:
              type: string
            phone:
              type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        status:
          type: string
          enum: [PENDING, COMPLETED]
        orderNotes:
          type: string
        deliveryAddress:
          type: string
        deliveryPricingRequestId:
          type: string
          format: uuid
      required:
        - id
        - listingIds
        - status
        - createdAt
        - updatedAt

    OrderInput:
      type: object
      properties:
        listingIds:
          type: array
          items:
            type: string
            format: uuid
        customerInfo:
          type: object
          properties:
            name:
              type: string
            email:
              type: string
            phone:
              type: string
        status:
          type: string
          enum: [PENDING, COMPLETED]
        orderNotes:
          type: string
        deliveryAddress:
          type: string
        deliveryPricingRequestId:
          type: string
          format: uuid
      required:
        - listingIds
        - status
