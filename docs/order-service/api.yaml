openapi: 3.0.3
info:
  title: Order Service API
  version: "1.0.0"
  description: A RESTful API for managing checkout sessions and orders.
servers:
  - url: https://order.example.com/v1

security:
  - bearerAuth: []

tags:
  - name: Checkout-Session
    description: Operations around initializing and summarizing checkout sessions
  - name: Orders
    description: CRUD operations for orders

paths:
  /checkout-session-init:
    post:
      tags:
        - Checkout-Session
      summary: Initialize a new checkout session
      requestBody:
        $ref: "#/components/requestBodies/CheckoutSessionInitInput"
      responses:
        "201":
          description: Checkout session created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckoutSessionInitOutput"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /checkout-sessions/{sessionId}/summary:
    post:
      tags:
        - Checkout-Session
      summary: Finalize a session by providing delivery details and get cost summary
      parameters:
        - $ref: "#/components/parameters/SessionId"
      requestBody:
        $ref: "#/components/requestBodies/CheckoutSessionSummaryInput"
      responses:
        "200":
          description: Computed summary for the session
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckoutSessionSummaryOutput"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /orders:
    get:
      tags:
        - Orders
      summary: Retrieve all orders
      responses:
        "200":
          description: A list of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderOutput"
        "401":
          $ref: "#/components/responses/Unauthorized"

    post:
      tags:
        - Orders
      summary: Create a new order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderInput"
      responses:
        "201":
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderOutput"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /orders/{orderId}:
    get:
      tags:
        - Orders
      summary: Retrieve a specific order
      parameters:
        - $ref: "#/components/parameters/OrderId"
      responses:
        "200":
          description: Order found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderOutput"
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

    put:
      tags:
        - Orders
      summary: Update an existing order
      parameters:
        - $ref: "#/components/parameters/OrderId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderInput"
      responses:
        "200":
          description: Order updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderOutput"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

    delete:
      tags:
        - Orders
      summary: Delete an order
      parameters:
        - $ref: "#/components/parameters/OrderId"
      responses:
        "204":
          description: Order deleted successfully
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    SessionId:
      name: sessionId
      in: path
      required: true
      description: UUID of the checkout session
      schema:
        type: string
        format: uuid

    OrderId:
      name: orderId
      in: path
      required: true
      description: UUID of the order
      schema:
        type: string
        format: uuid

  requestBodies:
    CheckoutSessionInitInput:
      description: Listing IDs to include in the new checkout session
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CheckoutSessionInitInput"

    CheckoutSessionSummaryInput:
      description: Delivery details to finalize the checkout session
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CheckoutSessionSummaryInput"

  responses:
    BadRequest:
      description: Invalid request payload
    Unauthorized:
      description: Authentication required
    NotFound:
      description: Resource not found

  schemas:
    CheckoutSessionInitInput:
      type: object
      required:
        - listingIds
      properties:
        listingIds:
          type: array
          description: List of listing UUIDs to include
          items:
            type: string
            format: uuid

    CheckoutSessionInitOutput:
      type: object
      properties:
        checkoutSessionId:
          type: string
          format: uuid
          description: Identifier of the newly created session

    CheckoutSessionSummaryInput:
      type: object
      required:
        - deliveryAddress
      properties:
        deliveryAddress:
          type: string
          description: Destination address for delivery
          example: 123 Main St, Boise, ID
        pickupTime:
          type: string
          format: date-time
          description: Preferred pickup time (ISO 8601)
        orderNotes:
          type: string
          description: Optional notes about this order

    CheckoutSessionSummaryOutput:
      type: object
      description: Detailed cost breakdown for a checkout session
      properties:
        sessionId:
          type: string
          format: uuid
        subtotal:
          type: number
          format: float
        deliveryDetails:
          type: object
          properties:
            category:
              type: string
              enum: [BASE, XL]
            weightCharges:
              type: number
              format: float
            distanceCharges:
              type: number
              format: float
            surcharges:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                  amount:
                    type: number
                    format: float
            estimatedTravelTime:
              type: string
              description: ISO 8601 duration
            total:
              type: number
              format: float

    OrderInput:
      type: object
      required:
        - listingIds
        - status
      properties:
        listingIds:
          type: array
          items:
            type: string
            format: uuid
        customerInfo:
          type: object
          properties:
            name:
              type: string
            email:
              type: string
            phone:
              type: string
        status:
          type: string
          enum: [PENDING, COMPLETED]
        orderNotes:
          type: string
        deliveryAddress:
          type: string
        deliveryPricingRequestId:
          type: string
          format: uuid

    OrderOutput:
      type: object
      required:
        - id
        - listingIds
        - status
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
        listingIds:
          type: array
          items:
            type: string
            format: uuid
        customerInfo:
          type: object
          properties:
            name:
              type: string
            email:
              type: string
            phone:
              type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        status:
          type: string
          enum: [PENDING, COMPLETED]
        orderNotes:
          type: string
        deliveryAddress:
          type: string
        deliveryPricingRequestId:
          type: string
          format: uuid
